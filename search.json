[{"path":"https://ninanor.github.io/eaTools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 eaTools authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ninanor.github.io/eaTools/articles/normalise-condition-variable.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Normalise condition variable","text":"article explains use ea_normalise(). Use function normalise (also called rescale) condition variables based defined reference levels (also called reference values). Let’s get example data. sf object 2079 rows (.e. polygons). column condition_variable_2 contains dummy variable take raw units (e.g. kg km).  want normalise variable become bound 0 1.","code":"data(\"ex_polygons\") class(ex_polygons) #> [1] \"sf\"         \"data.frame\" plot(ex_polygons$condition_variable_2)"},{"path":"https://ninanor.github.io/eaTools/articles/normalise-condition-variable.html","id":"plotting-the-results","dir":"Articles","previous_headings":"","what":"Plotting the results","title":"Normalise condition variable","text":"helpful visualise transformation make sure function expect (Fig. 1). Figure 1: Visualising results normalising linear scaling condition_variable_2 using defined upper reference level default lower reference level zero way default method linear scaling upper lower reference levels, indicator values truncated 1 0. can also add break point (Fig. 2). break point value condition variable become scaled 0.6 (threshold used define good ecological condition contexts). Figure 2: Visualising results normalising linear break-point scaling condition_variable_2 using defined upper reference level default lower reference level zero can two-sided normalisation defining optimum value (Fig. 3). Note non-compatible defining break-point. Figure 3: Visualising results two-sided normalising condition_variable_2 using defined upper reference level default lower reference level zero Finally also option scaling condition variable using sigmoid function (Fig. 4), positive (Fig. 6) negative (Fig. 5) exponential function. latter two non-compatible defined break-point, first one . Figure 4: Visualising results normalising sigmoid transformation condition_variable_2 using defined upper reference level default lower reference level zero Figure 5: Visualising results normalising negative exponensial transformation condition_variable_2 using defined upper reference level default lower reference level zero Figure 6: Visualising results normalising positive exponensial transformation condition_variable_2 using defined upper reference level default lower reference level zero","code":"eaTools::ea_normalise(data = ex_polygons,              vector = \"condition_variable_2\",              upper_reference_level = 7,              plot = T) eaTools::ea_normalise(data = ex_polygons,              vector = \"condition_variable_2\",              upper_reference_level = 7,              break_point = 5,              plot = T) eaTools::ea_normalise(data = ex_polygons,              vector = \"condition_variable_2\",              upper_reference_level = 7,              optimum = 5,              plot = T) eaTools::ea_normalise(data = ex_polygons,              vector = \"condition_variable_2\",              upper_reference_level = 7,              scaling_function = \"sigmoid\",              plot = T) eaTools::ea_normalise(data = ex_polygons,              vector = \"condition_variable_2\",              upper_reference_level = 7,              scaling_function = \"exponential convex\",              plot = T) eaTools::ea_normalise(data = ex_polygons,              vector = \"condition_variable_2\",              upper_reference_level = 7,              scaling_function = \"exponential concave\",              plot = T)"},{"path":"https://ninanor.github.io/eaTools/articles/normalise-condition-variable.html","id":"export-values","dir":"Articles","previous_headings":"Plotting the results","what":"Export values","title":"Normalise condition variable","text":"’ve found correct settings normalisation, can export new values like ","code":"ex_polygons$condition_indicator_2 <- eaTools::ea_normalise(data = ex_polygons,              vector = \"condition_variable_2\",              upper_reference_level = 7)"},{"path":"https://ninanor.github.io/eaTools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anders Kolstad. Author, maintainer.","code":""},{"path":"https://ninanor.github.io/eaTools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kolstad (2022). eaTools: Tools Ecosystem Accounting. R package version 0.0.0.9000, https://ninanor.github.io/eaTools/.","code":"@Manual{,   title = {eaTools: Tools for Ecosystem Accounting},   author = {Anders Kolstad},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://ninanor.github.io/eaTools/}, }"},{"path":"https://ninanor.github.io/eaTools/index.html","id":"eatools-","dir":"","previous_headings":"","what":"Tools for Ecosystem Accounting","title":"Tools for Ecosystem Accounting","text":"goal eaTools provide tools creating ecosystem accounts.","code":""},{"path":"https://ninanor.github.io/eaTools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Ecosystem Accounting","text":"can install development version eaTools GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"NINAnor/eaTools\")"},{"path":"https://ninanor.github.io/eaTools/reference/accounting_area.html","id":null,"dir":"Reference","previous_headings":"","what":"accounting_area — accounting_area","title":"accounting_area — accounting_area","text":"accounting_area outline five regions.","code":""},{"path":"https://ninanor.github.io/eaTools/reference/accounting_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"accounting_area — accounting_area","text":"","code":"accounting_area"},{"path":"https://ninanor.github.io/eaTools/reference/accounting_area.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"accounting_area — accounting_area","text":"sf object name Municipality name SHAPE_Area area polygons geometry geometry sf object","code":""},{"path":"https://ninanor.github.io/eaTools/reference/ea_normalise.html","id":null,"dir":"Reference","previous_headings":"","what":"ea_normalise — ea_normalise","title":"ea_normalise — ea_normalise","text":"function normalise, re-scale, numerical vector condition variable become value 0 1, bound upper reference level.","code":""},{"path":"https://ninanor.github.io/eaTools/reference/ea_normalise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ea_normalise — ea_normalise","text":"","code":"ea_normalise(   data = NULL,   vector = NULL,   upper_reference_level = NULL,   lower_reference_level = 0,   scaling_function = \"linear\",   reverse = FALSE,   break_point = NULL,   optimum = NULL,   plot = FALSE )"},{"path":"https://ninanor.github.io/eaTools/reference/ea_normalise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ea_normalise — ea_normalise","text":"data Data set class sf vector Numerical vector inside data normalised upper_reference_level upper reference level normalise vector. Can single number vector length equal vector. lower_reference_level lower reference level normalise vector. Defaults 0. Can single number vector length equal vector. scaling_function one c(\"linear\", \"sigmoid\", \"exponential convex\", \"exponential concave\") reverse Logical. indicator values reversed (.e. giving high variable value low indicator value) break_point Numerical vector single value indicating value variable scaled 0.6 indicator. optimum Numerical vector single value indicating upper reference value two-sided indicator. plot Logical. Wheter return plot comparing normalised raw values, return normalised values (default).","code":""},{"path":"https://ninanor.github.io/eaTools/reference/ea_normalise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ea_normalise — ea_normalise","text":"plot = TRUE return ggplot comparing normalised raw values. plot = False return numerical vector, normalised version vetcor","code":""},{"path":"https://ninanor.github.io/eaTools/reference/ea_normalise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ea_normalise — ea_normalise","text":"","code":"data(\"ex_polygons\") ea_normalise(data = ex_polygons,             vector = \"condition_variable_2\",             upper_reference_level = 8,             plot=TRUE)"},{"path":"https://ninanor.github.io/eaTools/reference/ex_polygons.html","id":null,"dir":"Reference","previous_headings":"","what":"ex_polygons — ex_polygons","title":"ex_polygons — ex_polygons","text":"Example polygon data eaTools. ex_polygons sf object dummy condition variable (un-scaled). cover entire accounting area.","code":""},{"path":"https://ninanor.github.io/eaTools/reference/ex_polygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ex_polygons — ex_polygons","text":"","code":"ex_polygons"},{"path":"https://ninanor.github.io/eaTools/reference/ex_polygons.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ex_polygons — ex_polygons","text":"sf object ID Unique row IDs SHAPE_Area area polygons SHAPE geometry sf object condition_variable_1 positive number zero 10 condition_variable_2 normally distributed vector mean =2 sd = 2 condition_variable_3 number value 0 1","code":""},{"path":"https://ninanor.github.io/eaTools/reference/ex_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"ex_raster — ex_raster","title":"ex_raster — ex_raster","text":"ex_raster 1000x1000m raster grid extent account area, cells randomly classed either 1, 2 3.","code":""},{"path":"https://ninanor.github.io/eaTools/reference/ex_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ex_raster — ex_raster","text":"","code":"ex_raster"},{"path":"https://ninanor.github.io/eaTools/reference/ex_raster.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ex_raster — ex_raster","text":"stars object 40 rows 34 column(s)","code":""}]
