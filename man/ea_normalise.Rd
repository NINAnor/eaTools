% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ea_normalise.R
\name{ea_normalise}
\alias{ea_normalise}
\title{ea_normalise}
\usage{
ea_normalise(
  data = NULL,
  vector = NULL,
  upper_reference_level = NULL,
  lower_reference_level = 0,
  scaling_function = "linear",
  reverse = FALSE,
  break_point = NULL,
  optimum = NULL,
  plot = FALSE
)
}
\arguments{
\item{data}{Data set of class sf}

\item{vector}{Numerical vector inside \code{data} which should be normalised}

\item{upper_reference_level}{The upper reference level against which to normalise the \code{vector}. Can be a single number or a vector of length equal to \code{vector}.}

\item{lower_reference_level}{The lower reference level against which to normalise the \code{vector}. Defaults to 0. Can be a single number or a vector of length equal to \code{vector}.}

\item{scaling_function}{one of c("linear", "sigmoid", "exponential convex", "exponential concave")}

\item{reverse}{Logical. Should the indicator values be reversed (i.e. giving a high variable value a low indicator value)}

\item{break_point}{Numerical vector or single value indicating the value of the variable which should be scaled to 0.6 in the indicator.}

\item{optimum}{Numerical vector or single value indicating the upper reference value for a two-sided indicator.}

\item{plot}{Logical. Wheter to return a plot comparing normalised and raw values, or to return the normalised values (default).}
}
\value{
If plot = TRUE return a ggplot comparing normalised and raw values. If plot = False return the numerical vector, a normalised version of \code{vetcor}
}
\description{
A function to normalise, or re-scale, a numerical vector such as a condition variable to become a value between 0 and 1, bound by an upper reference level.
}
\examples{
data("ex_polygons")
ea_normalise(data = ex_polygons,
            vector = "condition_variable_2",
            upper_reference_level = 8,
            plot=TRUE)
}
