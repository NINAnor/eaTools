% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ea_spread.R
\name{ea_spread}
\alias{ea_spread}
\title{ea_spread}
\usage{
ea_spread(indicator_data, indicator, regions, groups, threshold = 1)
}
\arguments{
\item{indicator_data}{A spatial object (currently inly sf objects are supported) containing scaled indicator values}

\item{indicator}{Column name in \code{indicator_data} containing indicator values. Should be unquoted.}

\item{regions}{A spatial object (currently only stars objects are supported) where cell values assign areas to homogeneous area classes.}

\item{groups}{Name in \code{regions} containing homogeneous area classes. Should be unquoted.}

\item{threshold}{Number of data points (i.e. unique indicator values) needed to calculate an average indicator value. Defaults to 1 (i.e. no threshold).}
}
\value{
The returned object is an \code{sf} object containing homogeneous area classes and mean indicator values.
}
\description{
A function to aggregate (area weigted means) indicator values stored in a spatial object (sf or stars object) for each homogeneous area class, and subsequently to spread these values out to populate all the area for the homogeneous area classes.
}
\examples{
data("ex_polygons")
data("ex_raster")

# Example using a raster to define homogeneous area classes.
# Zooming in on the example data
ex_raster_zoom <- ex_raster[,5:6, 28:29]
ex_polygons_zoom <- sf::st_crop(ex_polygons, ex_raster_zoom)
# Scale the indicator
ex_polygons_zoom$indicator <- ea_normalise(ex_polygons_zoom,
"condition_variable_2",
upper_reference_level = 7)
# Tweak the data slightly for exagerated effect
ex_polygons_zoom$indicator[2:6] <- 1
Process the `ex_raster_zoom` and define homogeneous areas based on the cell values.
myRegions <- ea_homogeneous_area(ex_raster_zoom)
Now use the function
out <- ea_spread(indicator_data = ex_polygons_zoom,
indicator = indicator,
regions = myRegions,
groups = values)
# And plot the results
tm_shape(out)+
tm_polygons(col = "meanIndicatorValue",
           title="Indicator value",
           palette = "RdYlGn",
           breaks = seq(0,1,0.2))+
tm_layout(legend.position = c('left', 'top'))
}
